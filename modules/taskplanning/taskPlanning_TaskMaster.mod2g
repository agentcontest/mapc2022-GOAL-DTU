use "../../knowledge_generated" as knowledge.

module taskPlanning_TaskMaster {

	if bel(name(MyName), step(CurrentStep)) then {
    	
		% Send requests for resource information.
		if bel(nameToChannel(MyName, Channel)),
		   bel(rankTasks(Tasks), Tasks = [[_, HighestRankedTask] |_]),
		   bel(availableGoalZones(GoalCells)) 
		then (Channel).send?(resourceRequest(HighestRankedTask, GoalCells)) + 
			 insert(resourceRequestSent(HighestRankedTask, GoalCells, CurrentStep)) +
			 print("Sent resource request").
			
		% Allow the same task to be requested again after 10 steps
		if bel(Step is CurrentStep - 10) then {
			forall bel(resourceRequestSent(Task, GoalCells, Step))
			    do delete(resourceRequestSent(Task, GoalCells, Step)).
		}
		
		% Save all answers
		listall AnswersList <- (Agent).sent!(resourceReply(Task, Resources)) do {
			forall bel(member(Answer, AnswersList)) do insert(savedResourceReply(Answer)).
		}
	}
	
	% If we have sent resource requests - wait #SOME# turns - here just set to 3 for testing
	if bel(resourceRequestSent(Task, GoalCells, Step)), 
	   bel(CurrentStep is Step + 3),
	   bel(step(CurrentStep))
	then {
		
		% Combine new answers with saved answers and - Do the planning -
		if bel(getResourceReplies(Task,  GoalCells, Answers)),
		   bel(findPlan(Task, Answers, GoalZone, TaskPlan)),
		   bel(TaskPlan \= [])
		then {		
					
			if  bel(name(MyName)),
				bel(Task = task(TaskName, _, _, _))
			then {
				if true 
				then insert(taskPlan(TaskPlan)) + 
				insert(occupied(TaskName, GoalZone)) + 
				print("TaskPlan: ") + 
				print(TaskPlan).
				
				% Create task-channel
				if bel(taskToChannel(MyName, TaskPlan, Channel)) 
				then subscribe(Channel).
			}
			
			forall bel(member((Agent, TaskName, ETA, AgentPlan, BlockType, BlockQty, Connections), TaskPlan)) do
				(Agent).send!(taskPlan(Agent, TaskName, ETA, AgentPlan, BlockType, BlockQty, Connections)) +
				insert(occupied(TaskName, Agent)).		
		}
				
		% Delete all saved replies
		forall bel(savedResourceReply([Task, Resources, Agent])) 
		do delete(savedResourceReply([Task, Resources, Agent])).
	}	

		
	% Dropping a task	
	forall bel(taskPlan(TaskPlan))
	do {
		if bel(member((_, TaskName, ETA, _, _, _, _), TaskPlan)) then {
		
			if (DroppingAgent).sent!(dropTask(TaskName)), 
			   not(bel(deleteTask(TaskName)))
			then print("Someone dropped the task!: ", DroppingAgent, TaskName) +
				 insert(deleteTask(TaskName)).
				 
			if (SubmittingAgent).sent!(taskSubmitted(TaskName))
			then print("Someone submitted the task!: ", SubmittingAgent, TaskName) +
		   		insert(deleteTask(TaskName)).
				 
			%if bel(step(Step), Step > ETA),
			%   not(bel(deleteTask(TaskName)))
			%then insert(deleteTask(TaskName)) +
			%     print("Task is outdated", TaskName).
			     
			if not(bel(task(TaskName, _, _, _))),
			   not(bel(deleteTask(TaskName)))
			then insert(deleteTask(TaskName)).
		}
	}
		
	% Delete tasks
	forall bel(deleteTask(TaskName))
	do {
		if true then print("Instrucing to drop task: ") + print(TaskName).
		
		if bel(name(MyName)) then {
			forall bel(occupied(TaskName, Thing)) do
			delete(occupied(TaskName, Thing)).
			
			if bel(taskPlan(TaskPlan)),
			   bel(member((_, TaskName, _, _, _, _, _), TaskPlan))
			then {
				if true then delete(taskPlan(TaskPlan)).
			
				if bel(taskToChannel(MyName, TaskPlan, Channel))
				then unsubscribe(Channel).
			}
						
			if true then delete(deleteTask(TaskName)).			
		}
	}
}